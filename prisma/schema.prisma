// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

enum AuthType {
  GOOGLE
  REOWN
  PRIVY
}

enum StorageProvider {
  IPFS
  R2
  VERCEL_BLOB
  SUPABASE_STORAGE
}

model Site {
  id              String          @id @default(uuid())
  name            String
  description     String          @default("") @db.Text
  about           String          @default("") @db.Text
  spaceId         String?
  logo            String?         @default("https://public.blob.vercel-storage.com/eEZHAoPTOBSYGBE3/JRajRyC-PhBHEinQkupt02jqfKacBVHLWJq7Iy.png") @db.Text
  font            String          @default("font-cal")
  image           String?         @default("") @db.Text
  email           String?
  authType        AuthType        @default(REOWN)
  authConfig      Json?
  storageProvider StorageProvider @default(IPFS)
  storageConfig   Json?
  socials         Json?
  config          Json?
  subdomain       String?         @unique
  customDomain    String?         @unique
  memberCount     Int             @default(0)
  postCount       Int             @default(0)
  message404      String?         @default("Blimey! You've found a page that doesn't exist.") @db.Text
  themeName       String          @default("")
  symbolName      String?         @unique
  spaceAddress    String?         @unique // space on chain address
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("site")
}

enum UserRole {
  ADMIN
  AUTHOR
  READER
}

model User {
  id            String        @id @default(uuid())
  address       String?       @unique
  openid        String?       @unique
  name          String?
  ensName       String?
  role          UserRole      @default(READER)
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  bio           String        @default("")
  subscriptions Json?
  github        Json? // github oauth info
  google        Json? // google oauth info
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  posts         Post[]
  comments      Comment[]
  tags          Tag[]
  accessTokens  AccessToken[]

  @@index([id])
  @@index([address])
  @@map("user")
}

enum PostType {
  ARTICLE
  IMAGE
  VIDEO
  AUDIO
  NFT
  FIGMA
}

enum GateType {
  FREE
  PAID
  MEMBER_ONLY
}

enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum CommentStatus {
  OPEN
  CLOSED
}

model Post {
  id            String        @id @default(uuid())
  slug          String        @default(uuid())
  title         String        @default("") @db.Text
  description   String        @default("") @db.Text
  content       String        @default("") @db.Text
  cid           String        @default("")
  type          PostType      @default(ARTICLE)
  gateType      GateType      @default(FREE)
  postStatus    PostStatus    @default(DRAFT)
  commentStatus CommentStatus @default(OPEN)
  image         String?       @default("") @db.Text
  featured      Boolean       @default(false)
  publishedAt   DateTime      @default(now())
  archivedAt    DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  comments      Comment[]
  postTags      PostTag[]

  @@index([userId])
  @@map("post")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @default("") @db.Text
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@map("comment")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @default("")
  color     String   @default("")
  postCount Int      @default(0)
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User?     @relation(fields: [userId], references: [id])
  userId   String?
  postTags PostTag[]

  @@index(name)
  @@map("tag")
}

model PostTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String

  @@index([postId])
  @@map("post_tag")
}

model Asset {
  id   String  @id @default(uuid())
  url  String  @default("")
  cid  String  @default("")
  type String?

  @@map("asset")
}

model AccessToken {
  id         String    @id @default(uuid())
  token      String    @default("")
  alias      String?
  expiredAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastUsedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
  @@map("access_token")
}
